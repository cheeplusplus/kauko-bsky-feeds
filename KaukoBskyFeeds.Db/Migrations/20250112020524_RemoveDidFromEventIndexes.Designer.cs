// <auto-generated />
using System;
using System.Collections.Generic;
using KaukoBskyFeeds.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KaukoBskyFeeds.Db.Migrations
{
    [DbContext(typeof(FeedDbContext))]
    [Migration("20250112020524_RemoveDidFromEventIndexes")]
    partial class RemoveDidFromEventIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KaukoBskyFeeds.Db.Models.Post", b =>
                {
                    b.Property<string>("Did")
                        .HasColumnType("text");

                    b.Property<string>("Rkey")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmbedRecordUri")
                        .HasColumnType("text");

                    b.Property<string>("EmbedType")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventTimeUs")
                        .HasColumnType("bigint");

                    b.Property<int>("ImageCount")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("Langs")
                        .HasColumnType("text[]");

                    b.Property<string>("ReplyParentUri")
                        .HasColumnType("text");

                    b.Property<string>("ReplyRootUri")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.HasKey("Did", "Rkey");

                    b.HasIndex("EventTime")
                        .IsDescending();

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("KaukoBskyFeeds.Db.Models.PostLike", b =>
                {
                    b.Property<string>("LikeDid")
                        .HasColumnType("text");

                    b.Property<string>("LikeRkey")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventTimeUs")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentDid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentRkey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LikeDid", "LikeRkey");

                    b.HasIndex("EventTime")
                        .IsDescending();

                    b.HasIndex("ParentDid", "ParentRkey");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("KaukoBskyFeeds.Db.Models.PostQuotePost", b =>
                {
                    b.Property<string>("QuoteDid")
                        .HasColumnType("text");

                    b.Property<string>("QuoteRkey")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventTimeUs")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentDid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentRkey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuoteDid", "QuoteRkey");

                    b.HasIndex("EventTime")
                        .IsDescending();

                    b.HasIndex("ParentDid", "ParentRkey");

                    b.ToTable("PostQuotePosts");
                });

            modelBuilder.Entity("KaukoBskyFeeds.Db.Models.PostReply", b =>
                {
                    b.Property<string>("ReplyDid")
                        .HasColumnType("text");

                    b.Property<string>("ReplyRkey")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventTimeUs")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentDid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentRkey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ReplyDid", "ReplyRkey");

                    b.HasIndex("EventTime")
                        .IsDescending();

                    b.HasIndex("ParentDid", "ParentRkey");

                    b.ToTable("PostReplies");
                });

            modelBuilder.Entity("KaukoBskyFeeds.Db.Models.PostRepost", b =>
                {
                    b.Property<string>("RepostDid")
                        .HasColumnType("text");

                    b.Property<string>("RepostRkey")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventTimeUs")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentDid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentRkey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RepostDid", "RepostRkey");

                    b.HasIndex("EventTime")
                        .IsDescending();

                    b.HasIndex("ParentDid", "ParentRkey");

                    b.ToTable("PostReposts");
                });

            modelBuilder.Entity("KaukoBskyFeeds.Db.Models.PostWithInteractions", b =>
                {
                    b.Property<string>("Did")
                        .HasColumnType("text");

                    b.Property<string>("Rkey")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmbedRecordUri")
                        .HasColumnType("text");

                    b.Property<string>("EmbedType")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventTimeUs")
                        .HasColumnType("bigint");

                    b.Property<int>("ImageCount")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("Langs")
                        .HasColumnType("text[]");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<int>("QuotePostCount")
                        .HasColumnType("integer");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("integer");

                    b.Property<string>("ReplyParentUri")
                        .HasColumnType("text");

                    b.Property<string>("ReplyRootUri")
                        .HasColumnType("text");

                    b.Property<int>("RepostCount")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.HasKey("Did", "Rkey");

                    b.ToTable((string)null);

                    b.ToView("PostsWithInteractions", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
